
Перем юТест;

Функция ПолучитьСписокТестов(Знач ЮнитТестирование) Экспорт

	юТест = ЮнитТестирование;

	МассивТестов = Новый Массив;
	МассивТестов.Добавить("ТестЧерныеСпискиСОшибками");
	МассивТестов.Добавить("ТестЧерныеСпискиБезОшибок");

	Возврат МассивТестов;

КонецФункции

Процедура ТестЧерныеСпискиСОшибками() Экспорт

	ПроверяемаяМодель = КорректнаяМодель();
	ПроверяемаяМодель.Удалить("isInBlackList");
	ПроверяемаяМодель.passport.series = 1214;
	ПроверяемаяМодель.surname = "";
	
	ОжидаемыеОшибки = Новый Массив;
	ОжидаемыеОшибки.Добавить("Не заполнено обязательное свойство ""surname"" (Фамилия физического лица.).");
	ОжидаемыеОшибки.Добавить("Отсутствует обязательное свойство ""isInBlackList"" (Признак нахождения физического лица в черном списке на момент записи.)."); // BSLLS:LineLength-off
	ОжидаемыеОшибки.Добавить("Некорректный тип свойства ""passport.series"" (Серия). Ожидается тип ""Строка"", передан тип ""Число""."); // BSLLS:LineLength-off
	
	ИмяФайла = ТекущийСценарий().Каталог + "\ЧерныеСписки.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла); 
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = Фасеты.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
		"persons.blackListRecord", ТекстСпецификации);

	Для Каждого ОжидаемаяОшибка Из ОжидаемыеОшибки Цикл

		ОшибкаВРезультате = ОшибкиПроверкиМоделиДанныхПоСпецификации.Найти(ОжидаемаяОшибка);
		Если ОшибкаВРезультате = Неопределено Тогда
			ТекстОшибки = СтрШаблон("Не возвращена ошибка: %1", ОжидаемаяОшибка);

			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		ОшибкиПроверкиМоделиДанныхПоСпецификации.Удалить(ОшибкаВРезультате);
	КонецЦикла;

	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда

		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1", 
			СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));

		ВызватьИсключение ТекстОшибки;

	КонецЕсли;

КонецПроцедуры

Процедура ТестЧерныеСпискиБезОшибок() Экспорт

	ПроверяемаяМодель = КорректнаяМодель();
		
	ИмяФайла = ТекущийСценарий().Каталог + "\ЧерныеСписки.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла); 
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = Фасеты.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
		"persons.blackListRecord", ТекстСпецификации);

	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда

		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1", 
			СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));

		ВызватьИсключение ТекстОшибки;

	КонецЕсли;

КонецПроцедуры

Функция КорректнаяМодель()

	МодельДанных = Новый Структура;
	МодельДанных.Вставить("date", "2020-07-29T15:39:47");
	МодельДанных.Вставить("isInBlackList", Истина);
	МодельДанных.Вставить("surname", "Иванов");
	МодельДанных.Вставить("name",    "Иван");
	МодельДанных.Вставить("patronymic", "Иванович");
	МодельДанных.Вставить("dateOfBirth", "1982-06-14");
	
	passport = Новый Структура;
	passport.Вставить("series", "76 23");
	passport.Вставить("number",  "762348");
	passport.Вставить("issuedBy",  "ОТДЕЛОМ УФМС РОССИИ");
	passport.Вставить("dateOfIssue",  "2008-07-19");
	МодельДанных.Вставить("passport", passport);

	Возврат МодельДанных;

КонецФункции


Функция ТекстСпецификацииИзФайла(Знач ИмяФайла)
	
	ТекстСпецификацииИзФайла = "";

	ТекстовыйДокумент   = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	ТекстСпецификацииИзФайла = ТекстовыйДокумент.ПолучитьТекст();

	Возврат ТекстСпецификацииИзФайла;

КонецФункции


Функция ПутьКТестам()
	ПутьКТестам = ОбъединитьПути(ТекущийСценарий().Каталог, "..", "tests");
	Возврат ПутьКТестам;
КонецФункции
	